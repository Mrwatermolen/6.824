TestBasicAgree2B：实现最简单的日志复制
对 leader 请求执行 3 个命令，五个节点均正常的情况下日志要能达成一致。
TestFailAgree2B：处理少部分节点失效
三个节点组成的集群中，某个普通节点发生了网络分区后，剩余两个节点要能继续 commit 和 apply 命令，当该该节点的网络恢复后，要能正确处理它的 higher term
TestFailNoAgree2B：处理大部分节点失效
在五个节点组成的集群中，若有三个节点失效，则 leader 处理的新命令都是 uncommit 的状态，也就不会 apply，但当三个节点的网络恢复后，要能根据日志新旧正确处理选举。
TestConcurrentStarts2B：处理并发的命令请求
在多个命令并发请求时，leader 要保证每次只能完整处理一条命令，不能因为并发导致有命令漏处理。
TestRejoin2B：处理过期 leader 提交的命令
过期 leader 本地有 uncommit 的旧日志，在 AppendEntries RPC 做日志一致性检查时进行日志的强制同步。这是最棘手的测试，其流程如下：
TestBackup2B：性能测试
在少部分节点失效、多部分节点失效环境下，尽快完成两百个命令的正确处理。
TestCount2B：检查无效通信的次数
正常情况下，超时无效的 RPC 调用不能过多。

Part 2C
TestPersist12C()：basic persistence，将节点宕机恢复验证持久化正确性
TestPersist22C()：more persistence，验证网络分区故障的情况下持久化数据的正确性
TestPersist32C()：partitioned leader and one follower crash, leader restarts，验证Leader宕机能否正确回复日志（除了所有类型节点都要在append、vote那里要持久化，Leader还有其它的地方需要持久化）
TestFigure82C()：Figure 8，测试paper中图8的错误情况，避免直接提交以前term的日志，其实只要知道怎么做就行了，在apply前加个判断term是否为最新的条件。
TestUnreliableAgree2C()：模拟不可靠网络的情况
TestFigure8Unreliable2C()：基于不可靠网络的图8测试
TestReliableChurn2C()：感觉像测试并发啥的，这里没怎么出错就没看了
TestUnreliableChurn2C()：同上

python3 dstest.py TestInitialElection2A TestReElection2A TestManyElections2A TestBasicAgree2B TestRPCBytes2B TestFailAgree2B TestFailNoAgree2B TestConcurrentStarts2B TestRejoin2B TestBackup2B TestCount2B  TestPersist12C TestPersist22C TestPersist32C TestFigure82C TestUnreliableAgree2C TestFigure8Unreliable2C TestReliableChurn2C TestUnreliableChurn2C TestSnapshotBasic2D TestSnapshotInstall2D TestSnapshotInstallUnreliable2D TestSnapshotInstallCrash2D  TestSnapshotInstallUnCrash2D TestSnapshotAllCrash2D -p 20 -n 100